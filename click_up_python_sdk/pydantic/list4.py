# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from click_up_python_sdk.pydantic.folder3 import Folder3
from click_up_python_sdk.pydantic.priority4 import Priority4
from click_up_python_sdk.pydantic.space2 import Space2
from click_up_python_sdk.pydantic.status11 import Status11

class List4(BaseModel):
    id: str = Field(alias='id')

    name: str = Field(alias='name')

    orderindex: int = Field(alias='orderindex')

    content: str = Field(alias='content')

    status: typing.Union[Status11, typing.Union[bool, date, datetime, dict, float, int, list, str, None], typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(alias='status')

    priority: typing.Union[Priority4, typing.Union[bool, date, datetime, dict, float, int, list, str, None], typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(alias='priority')

    assignee: typing.Union[bool, date, datetime, dict, float, int, list, str, None] = Field(alias='assignee')

    task_count: typing.Union[bool, date, datetime, dict, float, int, list, str, None] = Field(alias='task_count')

    due_date: typing.Union[bool, date, datetime, dict, float, int, list, str, None] = Field(alias='due_date')

    start_date: typing.Union[bool, date, datetime, dict, float, int, list, str, None] = Field(alias='start_date')

    folder: Folder3 = Field(alias='folder')

    space: Space2 = Field(alias='space')

    archived: bool = Field(alias='archived')

    override_statuses: bool = Field(alias='override_statuses')

    permission_level: str = Field(alias='permission_level')
    class Config:
        arbitrary_types_allowed = True
