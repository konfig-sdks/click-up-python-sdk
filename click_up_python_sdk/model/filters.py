# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Filters(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "op",
            "search",
            "fields",
            "show_closed",
        }
        
        class properties:
            op = schemas.StrSchema
        
            @staticmethod
            def fields() -> typing.Type['FiltersFields']:
                return FiltersFields
            search = schemas.StrSchema
            show_closed = schemas.BoolSchema
            __annotations__ = {
                "op": op,
                "fields": fields,
                "search": search,
                "show_closed": show_closed,
            }
    
    op: MetaOapg.properties.op
    search: MetaOapg.properties.search
    fields: 'FiltersFields'
    show_closed: MetaOapg.properties.show_closed
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["op"]) -> MetaOapg.properties.op: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'FiltersFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["search"]) -> MetaOapg.properties.search: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_closed"]) -> MetaOapg.properties.show_closed: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["op", "fields", "search", "show_closed", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["op"]) -> MetaOapg.properties.op: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> 'FiltersFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["search"]) -> MetaOapg.properties.search: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_closed"]) -> MetaOapg.properties.show_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["op", "fields", "search", "show_closed", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        op: typing.Union[MetaOapg.properties.op, str, ],
        search: typing.Union[MetaOapg.properties.search, str, ],
        fields: 'FiltersFields',
        show_closed: typing.Union[MetaOapg.properties.show_closed, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Filters':
        return super().__new__(
            cls,
            *args,
            op=op,
            search=search,
            fields=fields,
            show_closed=show_closed,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.filters_fields import FiltersFields
