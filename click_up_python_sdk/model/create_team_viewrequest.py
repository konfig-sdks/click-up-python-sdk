# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class CreateTeamViewrequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "team_sidebar",
            "settings",
            "columns",
            "sorting",
            "name",
            "divide",
            "filters",
            "type",
            "grouping",
        }
        
        class properties:
            name = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def grouping() -> typing.Type['Grouping']:
                return Grouping
        
            @staticmethod
            def divide() -> typing.Type['Divide']:
                return Divide
        
            @staticmethod
            def sorting() -> typing.Type['Sorting']:
                return Sorting
        
            @staticmethod
            def filters() -> typing.Type['Filters']:
                return Filters
        
            @staticmethod
            def columns() -> typing.Type['Columns']:
                return Columns
        
            @staticmethod
            def team_sidebar() -> typing.Type['TeamSidebar']:
                return TeamSidebar
        
            @staticmethod
            def settings() -> typing.Type['Settings']:
                return Settings
            __annotations__ = {
                "name": name,
                "type": type,
                "grouping": grouping,
                "divide": divide,
                "sorting": sorting,
                "filters": filters,
                "columns": columns,
                "team_sidebar": team_sidebar,
                "settings": settings,
            }
    
    team_sidebar: 'TeamSidebar'
    settings: 'Settings'
    columns: 'Columns'
    sorting: 'Sorting'
    name: MetaOapg.properties.name
    divide: 'Divide'
    filters: 'Filters'
    type: MetaOapg.properties.type
    grouping: 'Grouping'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grouping"]) -> 'Grouping': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["divide"]) -> 'Divide': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sorting"]) -> 'Sorting': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> 'Filters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columns"]) -> 'Columns': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_sidebar"]) -> 'TeamSidebar': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'Settings': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "type", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grouping"]) -> 'Grouping': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["divide"]) -> 'Divide': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sorting"]) -> 'Sorting': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> 'Filters': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columns"]) -> 'Columns': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_sidebar"]) -> 'TeamSidebar': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> 'Settings': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "type", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        team_sidebar: 'TeamSidebar',
        settings: 'Settings',
        columns: 'Columns',
        sorting: 'Sorting',
        name: typing.Union[MetaOapg.properties.name, str, ],
        divide: 'Divide',
        filters: 'Filters',
        type: typing.Union[MetaOapg.properties.type, str, ],
        grouping: 'Grouping',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateTeamViewrequest':
        return super().__new__(
            cls,
            *args,
            team_sidebar=team_sidebar,
            settings=settings,
            columns=columns,
            sorting=sorting,
            name=name,
            divide=divide,
            filters=filters,
            type=type,
            grouping=grouping,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.columns import Columns
from click_up_python_sdk.model.divide import Divide
from click_up_python_sdk.model.filters import Filters
from click_up_python_sdk.model.grouping import Grouping
from click_up_python_sdk.model.settings import Settings
from click_up_python_sdk.model.sorting import Sorting
from click_up_python_sdk.model.team_sidebar import TeamSidebar
