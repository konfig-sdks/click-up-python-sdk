# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Goal(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "creator",
            "multiple_owners",
            "private",
            "color",
            "date_created",
            "due_date",
            "description",
            "owners",
            "pretty_url",
            "history",
            "team_id",
            "percent_completed",
            "archived",
            "key_results",
            "members",
            "name",
            "id",
            "folder_id",
            "pretty_id",
            "start_date",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
            name = schemas.StrSchema
            team_id = schemas.StrSchema
            date_created = schemas.StrSchema
            start_date = schemas.AnyTypeSchema
            due_date = schemas.StrSchema
            private = schemas.BoolSchema
            archived = schemas.BoolSchema
            creator = schemas.IntSchema
            color = schemas.StrSchema
            pretty_id = schemas.StrSchema
            multiple_owners = schemas.BoolSchema
            folder_id = schemas.AnyTypeSchema
        
            @staticmethod
            def members() -> typing.Type['GoalMembers']:
                return GoalMembers
            
            
            class owners(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Owner']:
                        return Owner
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Owner'], typing.List['Owner']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owners':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Owner':
                    return super().__getitem__(i)
        
            @staticmethod
            def key_results() -> typing.Type['GoalKeyResults']:
                return GoalKeyResults
            percent_completed = schemas.IntSchema
        
            @staticmethod
            def history() -> typing.Type['GoalHistory']:
                return GoalHistory
            pretty_url = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "id": id,
                "name": name,
                "team_id": team_id,
                "date_created": date_created,
                "start_date": start_date,
                "due_date": due_date,
                "private": private,
                "archived": archived,
                "creator": creator,
                "color": color,
                "pretty_id": pretty_id,
                "multiple_owners": multiple_owners,
                "folder_id": folder_id,
                "members": members,
                "owners": owners,
                "key_results": key_results,
                "percent_completed": percent_completed,
                "history": history,
                "pretty_url": pretty_url,
            }
    
    creator: MetaOapg.properties.creator
    multiple_owners: MetaOapg.properties.multiple_owners
    private: MetaOapg.properties.private
    color: MetaOapg.properties.color
    date_created: MetaOapg.properties.date_created
    due_date: MetaOapg.properties.due_date
    description: MetaOapg.properties.description
    owners: MetaOapg.properties.owners
    pretty_url: MetaOapg.properties.pretty_url
    history: 'GoalHistory'
    team_id: MetaOapg.properties.team_id
    percent_completed: MetaOapg.properties.percent_completed
    archived: MetaOapg.properties.archived
    key_results: 'GoalKeyResults'
    members: 'GoalMembers'
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    folder_id: MetaOapg.properties.folder_id
    pretty_id: MetaOapg.properties.pretty_id
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pretty_id"]) -> MetaOapg.properties.pretty_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiple_owners"]) -> MetaOapg.properties.multiple_owners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["members"]) -> 'GoalMembers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_results"]) -> 'GoalKeyResults': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percent_completed"]) -> MetaOapg.properties.percent_completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["history"]) -> 'GoalHistory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pretty_url"]) -> MetaOapg.properties.pretty_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "team_id", "date_created", "start_date", "due_date", "private", "archived", "creator", "color", "pretty_id", "multiple_owners", "folder_id", "members", "owners", "key_results", "percent_completed", "history", "pretty_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pretty_id"]) -> MetaOapg.properties.pretty_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiple_owners"]) -> MetaOapg.properties.multiple_owners: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["members"]) -> 'GoalMembers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_results"]) -> 'GoalKeyResults': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percent_completed"]) -> MetaOapg.properties.percent_completed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["history"]) -> 'GoalHistory': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pretty_url"]) -> MetaOapg.properties.pretty_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "team_id", "date_created", "start_date", "due_date", "private", "archived", "creator", "color", "pretty_id", "multiple_owners", "folder_id", "members", "owners", "key_results", "percent_completed", "history", "pretty_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creator: typing.Union[MetaOapg.properties.creator, decimal.Decimal, int, ],
        multiple_owners: typing.Union[MetaOapg.properties.multiple_owners, bool, ],
        private: typing.Union[MetaOapg.properties.private, bool, ],
        color: typing.Union[MetaOapg.properties.color, str, ],
        date_created: typing.Union[MetaOapg.properties.date_created, str, ],
        due_date: typing.Union[MetaOapg.properties.due_date, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        owners: typing.Union[MetaOapg.properties.owners, list, tuple, ],
        pretty_url: typing.Union[MetaOapg.properties.pretty_url, str, ],
        history: 'GoalHistory',
        team_id: typing.Union[MetaOapg.properties.team_id, str, ],
        percent_completed: typing.Union[MetaOapg.properties.percent_completed, decimal.Decimal, int, ],
        archived: typing.Union[MetaOapg.properties.archived, bool, ],
        key_results: 'GoalKeyResults',
        members: 'GoalMembers',
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        folder_id: typing.Union[MetaOapg.properties.folder_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        pretty_id: typing.Union[MetaOapg.properties.pretty_id, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Goal':
        return super().__new__(
            cls,
            *args,
            creator=creator,
            multiple_owners=multiple_owners,
            private=private,
            color=color,
            date_created=date_created,
            due_date=due_date,
            description=description,
            owners=owners,
            pretty_url=pretty_url,
            history=history,
            team_id=team_id,
            percent_completed=percent_completed,
            archived=archived,
            key_results=key_results,
            members=members,
            name=name,
            id=id,
            folder_id=folder_id,
            pretty_id=pretty_id,
            start_date=start_date,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.goal_history import GoalHistory
from click_up_python_sdk.model.goal_key_results import GoalKeyResults
from click_up_python_sdk.model.goal_members import GoalMembers
from click_up_python_sdk.model.owner import Owner
