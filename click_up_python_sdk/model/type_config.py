# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class TypeConfig(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class options(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Option']:
                        return Option
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Option'], typing.List['Option']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'options':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Option':
                    return super().__getitem__(i)
            
            
            class default(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.AnyTypeSchema
                    one_of_1 = schemas.IntSchema
                    one_of_2 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                            cls.one_of_2,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'default':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            precision = schemas.IntSchema
            currency_type = schemas.StrSchema
            placeholder = schemas.AnyTypeSchema
            end = schemas.IntSchema
            start = schemas.IntSchema
            count = schemas.IntSchema
            code_point = schemas.StrSchema
        
            @staticmethod
            def tracking() -> typing.Type['Tracking']:
                return Tracking
            complete_on = schemas.IntSchema
            __annotations__ = {
                "options": options,
                "default": default,
                "precision": precision,
                "currency_type": currency_type,
                "placeholder": placeholder,
                "end": end,
                "start": start,
                "count": count,
                "code_point": code_point,
                "tracking": tracking,
                "complete_on": complete_on,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_type"]) -> MetaOapg.properties.currency_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placeholder"]) -> MetaOapg.properties.placeholder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code_point"]) -> MetaOapg.properties.code_point: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking"]) -> 'Tracking': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complete_on"]) -> MetaOapg.properties.complete_on: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["options", "default", "precision", "currency_type", "placeholder", "end", "start", "count", "code_point", "tracking", "complete_on", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union[MetaOapg.properties.options, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union[MetaOapg.properties.default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> typing.Union[MetaOapg.properties.precision, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_type"]) -> typing.Union[MetaOapg.properties.currency_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placeholder"]) -> typing.Union[MetaOapg.properties.placeholder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code_point"]) -> typing.Union[MetaOapg.properties.code_point, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking"]) -> typing.Union['Tracking', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complete_on"]) -> typing.Union[MetaOapg.properties.complete_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["options", "default", "precision", "currency_type", "placeholder", "end", "start", "count", "code_point", "tracking", "complete_on", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        options: typing.Union[MetaOapg.properties.options, list, tuple, schemas.Unset] = schemas.unset,
        default: typing.Union[MetaOapg.properties.default, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currency_type: typing.Union[MetaOapg.properties.currency_type, str, schemas.Unset] = schemas.unset,
        placeholder: typing.Union[MetaOapg.properties.placeholder, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        end: typing.Union[MetaOapg.properties.end, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start: typing.Union[MetaOapg.properties.start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        code_point: typing.Union[MetaOapg.properties.code_point, str, schemas.Unset] = schemas.unset,
        tracking: typing.Union['Tracking', schemas.Unset] = schemas.unset,
        complete_on: typing.Union[MetaOapg.properties.complete_on, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TypeConfig':
        return super().__new__(
            cls,
            *args,
            options=options,
            default=default,
            precision=precision,
            currency_type=currency_type,
            placeholder=placeholder,
            end=end,
            start=start,
            count=count,
            code_point=code_point,
            tracking=tracking,
            complete_on=complete_on,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.option import Option
from click_up_python_sdk.model.tracking import Tracking
