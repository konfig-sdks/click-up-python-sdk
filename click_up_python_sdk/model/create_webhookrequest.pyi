# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class CreateWebhookrequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "endpoint",
            "events",
        }
        
        class properties:
            endpoint = schemas.StrSchema
        
            @staticmethod
            def events() -> typing.Type['CreateWebhookrequestEvents']:
                return CreateWebhookrequestEvents
            space_id = schemas.IntSchema
            folder_id = schemas.IntSchema
            list_id = schemas.IntSchema
            task_id = schemas.StrSchema
            __annotations__ = {
                "endpoint": endpoint,
                "events": events,
                "space_id": space_id,
                "folder_id": folder_id,
                "list_id": list_id,
                "task_id": task_id,
            }
    
    endpoint: MetaOapg.properties.endpoint
    events: 'CreateWebhookrequestEvents'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> 'CreateWebhookrequestEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["space_id"]) -> MetaOapg.properties.space_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["list_id"]) -> MetaOapg.properties.list_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task_id"]) -> MetaOapg.properties.task_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["endpoint", "events", "space_id", "folder_id", "list_id", "task_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> 'CreateWebhookrequestEvents': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["space_id"]) -> typing.Union[MetaOapg.properties.space_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_id"]) -> typing.Union[MetaOapg.properties.folder_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["list_id"]) -> typing.Union[MetaOapg.properties.list_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task_id"]) -> typing.Union[MetaOapg.properties.task_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["endpoint", "events", "space_id", "folder_id", "list_id", "task_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        endpoint: typing.Union[MetaOapg.properties.endpoint, str, ],
        events: 'CreateWebhookrequestEvents',
        space_id: typing.Union[MetaOapg.properties.space_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        folder_id: typing.Union[MetaOapg.properties.folder_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        list_id: typing.Union[MetaOapg.properties.list_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        task_id: typing.Union[MetaOapg.properties.task_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateWebhookrequest':
        return super().__new__(
            cls,
            *args,
            endpoint=endpoint,
            events=events,
            space_id=space_id,
            folder_id=folder_id,
            list_id=list_id,
            task_id=task_id,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.create_webhookrequest_events import CreateWebhookrequestEvents
