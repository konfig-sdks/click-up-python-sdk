# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Assignees(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "add",
            "rem",
        }
        
        class properties:
        
            @staticmethod
            def add() -> typing.Type['AssigneesAdd']:
                return AssigneesAdd
        
            @staticmethod
            def rem() -> typing.Type['AssigneesRem']:
                return AssigneesRem
            __annotations__ = {
                "add": add,
                "rem": rem,
            }
    
    add: 'AssigneesAdd'
    rem: 'AssigneesRem'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add"]) -> 'AssigneesAdd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rem"]) -> 'AssigneesRem': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["add", "rem", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add"]) -> 'AssigneesAdd': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rem"]) -> 'AssigneesRem': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["add", "rem", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        add: 'AssigneesAdd',
        rem: 'AssigneesRem',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Assignees':
        return super().__new__(
            cls,
            *args,
            add=add,
            rem=rem,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.assignees_add import AssigneesAdd
from click_up_python_sdk.model.assignees_rem import AssigneesRem
