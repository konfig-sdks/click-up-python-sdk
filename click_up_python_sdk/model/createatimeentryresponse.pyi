# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Createatimeentryresponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "duration",
            "start",
            "description",
            "assignee",
            "billable",
            "tid",
            "tags",
        }
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tags6']:
                        return Tags6
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Tags6'], typing.List['Tags6']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tags6':
                    return super().__getitem__(i)
            description = schemas.StrSchema
            start = schemas.IntSchema
            billable = schemas.BoolSchema
            duration = schemas.IntSchema
            assignee = schemas.IntSchema
            tid = schemas.StrSchema
            __annotations__ = {
                "tags": tags,
                "description": description,
                "start": start,
                "billable": billable,
                "duration": duration,
                "assignee": assignee,
                "tid": tid,
            }
    
    duration: MetaOapg.properties.duration
    start: MetaOapg.properties.start
    description: MetaOapg.properties.description
    assignee: MetaOapg.properties.assignee
    billable: MetaOapg.properties.billable
    tid: MetaOapg.properties.tid
    tags: MetaOapg.properties.tags
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billable"]) -> MetaOapg.properties.billable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignee"]) -> MetaOapg.properties.assignee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tid"]) -> MetaOapg.properties.tid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "description", "start", "billable", "duration", "assignee", "tid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billable"]) -> MetaOapg.properties.billable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignee"]) -> MetaOapg.properties.assignee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tid"]) -> MetaOapg.properties.tid: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "description", "start", "billable", "duration", "assignee", "tid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, ],
        start: typing.Union[MetaOapg.properties.start, decimal.Decimal, int, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        assignee: typing.Union[MetaOapg.properties.assignee, decimal.Decimal, int, ],
        billable: typing.Union[MetaOapg.properties.billable, bool, ],
        tid: typing.Union[MetaOapg.properties.tid, str, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Createatimeentryresponse':
        return super().__new__(
            cls,
            *args,
            duration=duration,
            start=start,
            description=description,
            assignee=assignee,
            billable=billable,
            tid=tid,
            tags=tags,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.tags6 import Tags6
