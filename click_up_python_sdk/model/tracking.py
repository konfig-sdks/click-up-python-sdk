# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Tracking(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "checklists",
            "assigned_comments",
            "subtasks",
        }
        
        class properties:
            subtasks = schemas.BoolSchema
            checklists = schemas.BoolSchema
            assigned_comments = schemas.BoolSchema
            __annotations__ = {
                "subtasks": subtasks,
                "checklists": checklists,
                "assigned_comments": assigned_comments,
            }
    
    checklists: MetaOapg.properties.checklists
    assigned_comments: MetaOapg.properties.assigned_comments
    subtasks: MetaOapg.properties.subtasks
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtasks"]) -> MetaOapg.properties.subtasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checklists"]) -> MetaOapg.properties.checklists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigned_comments"]) -> MetaOapg.properties.assigned_comments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subtasks", "checklists", "assigned_comments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtasks"]) -> MetaOapg.properties.subtasks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checklists"]) -> MetaOapg.properties.checklists: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigned_comments"]) -> MetaOapg.properties.assigned_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subtasks", "checklists", "assigned_comments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        checklists: typing.Union[MetaOapg.properties.checklists, bool, ],
        assigned_comments: typing.Union[MetaOapg.properties.assigned_comments, bool, ],
        subtasks: typing.Union[MetaOapg.properties.subtasks, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Tracking':
        return super().__new__(
            cls,
            *args,
            checklists=checklists,
            assigned_comments=assigned_comments,
            subtasks=subtasks,
            _configuration=_configuration,
            **kwargs,
        )
