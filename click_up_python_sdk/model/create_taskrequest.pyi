# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class CreateTaskrequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def tags() -> typing.Type['CreateTaskrequestTags']:
                return CreateTaskrequestTags
            description = schemas.StrSchema
        
            @staticmethod
            def assignees() -> typing.Type['CreateTaskrequestAssignees']:
                return CreateTaskrequestAssignees
            status = schemas.StrSchema
            priority = schemas.AnyTypeSchema
            due_date = schemas.IntSchema
            due_date_time = schemas.BoolSchema
            time_estimate = schemas.IntSchema
            start_date = schemas.IntSchema
            start_date_time = schemas.BoolSchema
            notify_all = schemas.BoolSchema
            parent = schemas.AnyTypeSchema
            links_to = schemas.AnyTypeSchema
            check_required_custom_fields = schemas.BoolSchema
            
            
            class custom_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFields6']:
                        return CustomFields6
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomFields6'], typing.List['CustomFields6']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFields6':
                    return super().__getitem__(i)
            custom_item_id = schemas.NumberSchema
            __annotations__ = {
                "name": name,
                "tags": tags,
                "description": description,
                "assignees": assignees,
                "status": status,
                "priority": priority,
                "due_date": due_date,
                "due_date_time": due_date_time,
                "time_estimate": time_estimate,
                "start_date": start_date,
                "start_date_time": start_date_time,
                "notify_all": notify_all,
                "parent": parent,
                "links_to": links_to,
                "check_required_custom_fields": check_required_custom_fields,
                "custom_fields": custom_fields,
                "custom_item_id": custom_item_id,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'CreateTaskrequestTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignees"]) -> 'CreateTaskrequestAssignees': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date_time"]) -> MetaOapg.properties.due_date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_estimate"]) -> MetaOapg.properties.time_estimate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date_time"]) -> MetaOapg.properties.start_date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notify_all"]) -> MetaOapg.properties.notify_all: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links_to"]) -> MetaOapg.properties.links_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_required_custom_fields"]) -> MetaOapg.properties.check_required_custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_item_id"]) -> MetaOapg.properties.custom_item_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "tags", "description", "assignees", "status", "priority", "due_date", "due_date_time", "time_estimate", "start_date", "start_date_time", "notify_all", "parent", "links_to", "check_required_custom_fields", "custom_fields", "custom_item_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['CreateTaskrequestTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignees"]) -> typing.Union['CreateTaskrequestAssignees', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> typing.Union[MetaOapg.properties.due_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date_time"]) -> typing.Union[MetaOapg.properties.due_date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_estimate"]) -> typing.Union[MetaOapg.properties.time_estimate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date_time"]) -> typing.Union[MetaOapg.properties.start_date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notify_all"]) -> typing.Union[MetaOapg.properties.notify_all, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union[MetaOapg.properties.parent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links_to"]) -> typing.Union[MetaOapg.properties.links_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_required_custom_fields"]) -> typing.Union[MetaOapg.properties.check_required_custom_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union[MetaOapg.properties.custom_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_item_id"]) -> typing.Union[MetaOapg.properties.custom_item_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "tags", "description", "assignees", "status", "priority", "due_date", "due_date_time", "time_estimate", "start_date", "start_date_time", "notify_all", "parent", "links_to", "check_required_custom_fields", "custom_fields", "custom_item_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        tags: typing.Union['CreateTaskrequestTags', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        assignees: typing.Union['CreateTaskrequestAssignees', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        due_date: typing.Union[MetaOapg.properties.due_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        due_date_time: typing.Union[MetaOapg.properties.due_date_time, bool, schemas.Unset] = schemas.unset,
        time_estimate: typing.Union[MetaOapg.properties.time_estimate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_date_time: typing.Union[MetaOapg.properties.start_date_time, bool, schemas.Unset] = schemas.unset,
        notify_all: typing.Union[MetaOapg.properties.notify_all, bool, schemas.Unset] = schemas.unset,
        parent: typing.Union[MetaOapg.properties.parent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        links_to: typing.Union[MetaOapg.properties.links_to, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        check_required_custom_fields: typing.Union[MetaOapg.properties.check_required_custom_fields, bool, schemas.Unset] = schemas.unset,
        custom_fields: typing.Union[MetaOapg.properties.custom_fields, list, tuple, schemas.Unset] = schemas.unset,
        custom_item_id: typing.Union[MetaOapg.properties.custom_item_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateTaskrequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            tags=tags,
            description=description,
            assignees=assignees,
            status=status,
            priority=priority,
            due_date=due_date,
            due_date_time=due_date_time,
            time_estimate=time_estimate,
            start_date=start_date,
            start_date_time=start_date_time,
            notify_all=notify_all,
            parent=parent,
            links_to=links_to,
            check_required_custom_fields=check_required_custom_fields,
            custom_fields=custom_fields,
            custom_item_id=custom_item_id,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.create_taskrequest_assignees import CreateTaskrequestAssignees
from click_up_python_sdk.model.create_taskrequest_tags import CreateTaskrequestTags
from click_up_python_sdk.model.custom_fields6 import CustomFields6
