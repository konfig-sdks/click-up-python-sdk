# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class UpdateTeamresponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date_created",
            "initials",
            "members",
            "name",
            "handle",
            "avatar",
            "id",
            "team_id",
            "userid",
        }
        
        class properties:
            id = schemas.StrSchema
            team_id = schemas.StrSchema
            userid = schemas.IntSchema
            name = schemas.StrSchema
            handle = schemas.StrSchema
            date_created = schemas.StrSchema
            initials = schemas.StrSchema
            
            
            class members(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Members3']:
                        return Members3
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Members3'], typing.List['Members3']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'members':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Members3':
                    return super().__getitem__(i)
        
            @staticmethod
            def avatar() -> typing.Type['Avatar']:
                return Avatar
            __annotations__ = {
                "id": id,
                "team_id": team_id,
                "userid": userid,
                "name": name,
                "handle": handle,
                "date_created": date_created,
                "initials": initials,
                "members": members,
                "avatar": avatar,
            }
    
    date_created: MetaOapg.properties.date_created
    initials: MetaOapg.properties.initials
    members: MetaOapg.properties.members
    name: MetaOapg.properties.name
    handle: MetaOapg.properties.handle
    avatar: 'Avatar'
    id: MetaOapg.properties.id
    team_id: MetaOapg.properties.team_id
    userid: MetaOapg.properties.userid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userid"]) -> MetaOapg.properties.userid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["handle"]) -> MetaOapg.properties.handle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initials"]) -> MetaOapg.properties.initials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["members"]) -> MetaOapg.properties.members: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> 'Avatar': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "team_id", "userid", "name", "handle", "date_created", "initials", "members", "avatar", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userid"]) -> MetaOapg.properties.userid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["handle"]) -> MetaOapg.properties.handle: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initials"]) -> MetaOapg.properties.initials: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["members"]) -> MetaOapg.properties.members: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> 'Avatar': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "team_id", "userid", "name", "handle", "date_created", "initials", "members", "avatar", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_created: typing.Union[MetaOapg.properties.date_created, str, ],
        initials: typing.Union[MetaOapg.properties.initials, str, ],
        members: typing.Union[MetaOapg.properties.members, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        handle: typing.Union[MetaOapg.properties.handle, str, ],
        avatar: 'Avatar',
        id: typing.Union[MetaOapg.properties.id, str, ],
        team_id: typing.Union[MetaOapg.properties.team_id, str, ],
        userid: typing.Union[MetaOapg.properties.userid, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateTeamresponse':
        return super().__new__(
            cls,
            *args,
            date_created=date_created,
            initials=initials,
            members=members,
            name=name,
            handle=handle,
            avatar=avatar,
            id=id,
            team_id=team_id,
            userid=userid,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.avatar import Avatar
from click_up_python_sdk.model.members3 import Members3
