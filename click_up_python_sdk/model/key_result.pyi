# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class KeyResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "creator",
            "date_created",
            "goal_pretty_id",
            "owners",
            "completed",
            "last_action",
            "task_ids",
            "type",
            "percent_completed",
            "goal_id",
            "unit",
            "subcategory_ids",
            "name",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            goal_id = schemas.StrSchema
            name = schemas.StrSchema
            type = schemas.StrSchema
            unit = schemas.StrSchema
            creator = schemas.IntSchema
            date_created = schemas.StrSchema
            goal_pretty_id = schemas.StrSchema
            percent_completed = schemas.AnyTypeSchema
            completed = schemas.BoolSchema
        
            @staticmethod
            def task_ids() -> typing.Type['KeyResultTaskIds']:
                return KeyResultTaskIds
        
            @staticmethod
            def subcategory_ids() -> typing.Type['KeyResultSubcategoryIds']:
                return KeyResultSubcategoryIds
            
            
            class owners(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Owner']:
                        return Owner
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Owner'], typing.List['Owner']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owners':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Owner':
                    return super().__getitem__(i)
        
            @staticmethod
            def last_action() -> typing.Type['LastAction']:
                return LastAction
            __annotations__ = {
                "id": id,
                "goal_id": goal_id,
                "name": name,
                "type": type,
                "unit": unit,
                "creator": creator,
                "date_created": date_created,
                "goal_pretty_id": goal_pretty_id,
                "percent_completed": percent_completed,
                "completed": completed,
                "task_ids": task_ids,
                "subcategory_ids": subcategory_ids,
                "owners": owners,
                "last_action": last_action,
            }
    
    creator: MetaOapg.properties.creator
    date_created: MetaOapg.properties.date_created
    goal_pretty_id: MetaOapg.properties.goal_pretty_id
    owners: MetaOapg.properties.owners
    completed: MetaOapg.properties.completed
    last_action: 'LastAction'
    task_ids: 'KeyResultTaskIds'
    type: MetaOapg.properties.type
    percent_completed: MetaOapg.properties.percent_completed
    goal_id: MetaOapg.properties.goal_id
    unit: MetaOapg.properties.unit
    subcategory_ids: 'KeyResultSubcategoryIds'
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goal_id"]) -> MetaOapg.properties.goal_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goal_pretty_id"]) -> MetaOapg.properties.goal_pretty_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percent_completed"]) -> MetaOapg.properties.percent_completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completed"]) -> MetaOapg.properties.completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task_ids"]) -> 'KeyResultTaskIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subcategory_ids"]) -> 'KeyResultSubcategoryIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_action"]) -> 'LastAction': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "goal_id", "name", "type", "unit", "creator", "date_created", "goal_pretty_id", "percent_completed", "completed", "task_ids", "subcategory_ids", "owners", "last_action", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goal_id"]) -> MetaOapg.properties.goal_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goal_pretty_id"]) -> MetaOapg.properties.goal_pretty_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percent_completed"]) -> MetaOapg.properties.percent_completed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completed"]) -> MetaOapg.properties.completed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task_ids"]) -> 'KeyResultTaskIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subcategory_ids"]) -> 'KeyResultSubcategoryIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_action"]) -> 'LastAction': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "goal_id", "name", "type", "unit", "creator", "date_created", "goal_pretty_id", "percent_completed", "completed", "task_ids", "subcategory_ids", "owners", "last_action", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creator: typing.Union[MetaOapg.properties.creator, decimal.Decimal, int, ],
        date_created: typing.Union[MetaOapg.properties.date_created, str, ],
        goal_pretty_id: typing.Union[MetaOapg.properties.goal_pretty_id, str, ],
        owners: typing.Union[MetaOapg.properties.owners, list, tuple, ],
        completed: typing.Union[MetaOapg.properties.completed, bool, ],
        last_action: 'LastAction',
        task_ids: 'KeyResultTaskIds',
        type: typing.Union[MetaOapg.properties.type, str, ],
        percent_completed: typing.Union[MetaOapg.properties.percent_completed, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        goal_id: typing.Union[MetaOapg.properties.goal_id, str, ],
        unit: typing.Union[MetaOapg.properties.unit, str, ],
        subcategory_ids: 'KeyResultSubcategoryIds',
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'KeyResult':
        return super().__new__(
            cls,
            *args,
            creator=creator,
            date_created=date_created,
            goal_pretty_id=goal_pretty_id,
            owners=owners,
            completed=completed,
            last_action=last_action,
            task_ids=task_ids,
            type=type,
            percent_completed=percent_completed,
            goal_id=goal_id,
            unit=unit,
            subcategory_ids=subcategory_ids,
            name=name,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.key_result_subcategory_ids import KeyResultSubcategoryIds
from click_up_python_sdk.model.key_result_task_ids import KeyResultTaskIds
from click_up_python_sdk.model.last_action import LastAction
from click_up_python_sdk.model.owner import Owner
