# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Checklist2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "unresolved",
            "orderindex",
            "date_created",
            "name",
            "task_id",
            "id",
            "items",
            "resolved",
        }
        
        class properties:
            id = schemas.StrSchema
            task_id = schemas.StrSchema
            name = schemas.StrSchema
            date_created = schemas.StrSchema
            orderindex = schemas.IntSchema
            resolved = schemas.IntSchema
            unresolved = schemas.IntSchema
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Item1']:
                        return Item1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Item1'], typing.List['Item1']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Item1':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "task_id": task_id,
                "name": name,
                "date_created": date_created,
                "orderindex": orderindex,
                "resolved": resolved,
                "unresolved": unresolved,
                "items": items,
            }
    
    unresolved: MetaOapg.properties.unresolved
    orderindex: MetaOapg.properties.orderindex
    date_created: MetaOapg.properties.date_created
    name: MetaOapg.properties.name
    task_id: MetaOapg.properties.task_id
    id: MetaOapg.properties.id
    items: MetaOapg.properties.items
    resolved: MetaOapg.properties.resolved
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task_id"]) -> MetaOapg.properties.task_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolved"]) -> MetaOapg.properties.resolved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unresolved"]) -> MetaOapg.properties.unresolved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "task_id", "name", "date_created", "orderindex", "resolved", "unresolved", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task_id"]) -> MetaOapg.properties.task_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolved"]) -> MetaOapg.properties.resolved: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unresolved"]) -> MetaOapg.properties.unresolved: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "task_id", "name", "date_created", "orderindex", "resolved", "unresolved", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        unresolved: typing.Union[MetaOapg.properties.unresolved, decimal.Decimal, int, ],
        orderindex: typing.Union[MetaOapg.properties.orderindex, decimal.Decimal, int, ],
        date_created: typing.Union[MetaOapg.properties.date_created, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        task_id: typing.Union[MetaOapg.properties.task_id, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        resolved: typing.Union[MetaOapg.properties.resolved, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Checklist2':
        return super().__new__(
            cls,
            *args,
            unresolved=unresolved,
            orderindex=orderindex,
            date_created=date_created,
            name=name,
            task_id=task_id,
            id=id,
            items=items,
            resolved=resolved,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.item1 import Item1
