# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class UpdateGoalrequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "add_owners",
            "color",
            "due_date",
            "name",
            "description",
            "rem_owners",
        }
        
        class properties:
            description = schemas.StrSchema
            name = schemas.StrSchema
            due_date = schemas.IntSchema
        
            @staticmethod
            def rem_owners() -> typing.Type['UpdateGoalrequestRemOwners']:
                return UpdateGoalrequestRemOwners
        
            @staticmethod
            def add_owners() -> typing.Type['UpdateGoalrequestAddOwners']:
                return UpdateGoalrequestAddOwners
            color = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "name": name,
                "due_date": due_date,
                "rem_owners": rem_owners,
                "add_owners": add_owners,
                "color": color,
            }
    
    add_owners: 'UpdateGoalrequestAddOwners'
    color: MetaOapg.properties.color
    due_date: MetaOapg.properties.due_date
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    rem_owners: 'UpdateGoalrequestRemOwners'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rem_owners"]) -> 'UpdateGoalrequestRemOwners': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_owners"]) -> 'UpdateGoalrequestAddOwners': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "name", "due_date", "rem_owners", "add_owners", "color", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rem_owners"]) -> 'UpdateGoalrequestRemOwners': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_owners"]) -> 'UpdateGoalrequestAddOwners': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "name", "due_date", "rem_owners", "add_owners", "color", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        add_owners: 'UpdateGoalrequestAddOwners',
        color: typing.Union[MetaOapg.properties.color, str, ],
        due_date: typing.Union[MetaOapg.properties.due_date, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        rem_owners: 'UpdateGoalrequestRemOwners',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateGoalrequest':
        return super().__new__(
            cls,
            *args,
            add_owners=add_owners,
            color=color,
            due_date=due_date,
            name=name,
            description=description,
            rem_owners=rem_owners,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.update_goalrequest_add_owners import UpdateGoalrequestAddOwners
from click_up_python_sdk.model.update_goalrequest_rem_owners import UpdateGoalrequestRemOwners
