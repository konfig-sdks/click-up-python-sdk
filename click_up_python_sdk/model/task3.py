# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Task3(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "checklists",
            "parent",
            "date_updated",
            "text_content",
            "assignees",
            "description",
            "project",
            "watchers",
            "team_id",
            "space",
            "points",
            "date_done",
            "date_closed",
            "id",
            "start_date",
            "creator",
            "orderindex",
            "custom_fields",
            "date_created",
            "custom_id",
            "due_date",
            "list",
            "priority",
            "url",
            "dependencies",
            "tags",
            "time_estimate",
            "permission_level",
            "linked_tasks",
            "folder",
            "name",
            "status",
        }
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tags6']:
                        return Tags6
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Tags6'], typing.List['Tags6']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tags6':
                    return super().__getitem__(i)
            description = schemas.StrSchema
            id = schemas.StrSchema
            custom_id = schemas.AnyTypeSchema
            name = schemas.StrSchema
            text_content = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['Status']:
                return Status
            orderindex = schemas.StrSchema
            date_created = schemas.StrSchema
            date_updated = schemas.StrSchema
            date_closed = schemas.StrSchema
            date_done = schemas.AnyTypeSchema
        
            @staticmethod
            def creator() -> typing.Type['Creator5']:
                return Creator5
            
            
            class assignees(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Assignees1']:
                        return Assignees1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Assignees1'], typing.List['Assignees1']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignees':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Assignees1':
                    return super().__getitem__(i)
            
            
            class watchers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Watchers1']:
                        return Watchers1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Watchers1'], typing.List['Watchers1']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'watchers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Watchers1':
                    return super().__getitem__(i)
            
            
            class checklists(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Checklists6']:
                        return Checklists6
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Checklists6'], typing.List['Checklists6']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'checklists':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Checklists6':
                    return super().__getitem__(i)
            parent = schemas.StrSchema
            priority = schemas.IntSchema
            due_date = schemas.StrSchema
            start_date = schemas.StrSchema
            points = schemas.NumberSchema
            time_estimate = schemas.NumberSchema
            
            
            class custom_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFields9']:
                        return CustomFields9
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomFields9'], typing.List['CustomFields9']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFields9':
                    return super().__getitem__(i)
        
            @staticmethod
            def dependencies() -> typing.Type['Task3Dependencies']:
                return Task3Dependencies
        
            @staticmethod
            def linked_tasks() -> typing.Type['Task3LinkedTasks']:
                return Task3LinkedTasks
            team_id = schemas.StrSchema
            url = schemas.StrSchema
            permission_level = schemas.StrSchema
        
            @staticmethod
            def _list() -> typing.Type['List2']:
                return List2
        
            @staticmethod
            def project() -> typing.Type['Project']:
                return Project
        
            @staticmethod
            def folder() -> typing.Type['Folder3']:
                return Folder3
        
            @staticmethod
            def space() -> typing.Type['Space']:
                return Space
            markdown_description = schemas.StrSchema
            __annotations__ = {
                "tags": tags,
                "description": description,
                "id": id,
                "custom_id": custom_id,
                "name": name,
                "text_content": text_content,
                "status": status,
                "orderindex": orderindex,
                "date_created": date_created,
                "date_updated": date_updated,
                "date_closed": date_closed,
                "date_done": date_done,
                "creator": creator,
                "assignees": assignees,
                "watchers": watchers,
                "checklists": checklists,
                "parent": parent,
                "priority": priority,
                "due_date": due_date,
                "start_date": start_date,
                "points": points,
                "time_estimate": time_estimate,
                "custom_fields": custom_fields,
                "dependencies": dependencies,
                "linked_tasks": linked_tasks,
                "team_id": team_id,
                "url": url,
                "permission_level": permission_level,
                "list": _list,
                "project": project,
                "folder": folder,
                "space": space,
                "markdown_description": markdown_description,
            }
    
    checklists: MetaOapg.properties.checklists
    parent: MetaOapg.properties.parent
    date_updated: MetaOapg.properties.date_updated
    text_content: MetaOapg.properties.text_content
    assignees: MetaOapg.properties.assignees
    description: MetaOapg.properties.description
    project: 'Project'
    watchers: MetaOapg.properties.watchers
    team_id: MetaOapg.properties.team_id
    space: 'Space'
    points: MetaOapg.properties.points
    date_done: MetaOapg.properties.date_done
    date_closed: MetaOapg.properties.date_closed
    id: MetaOapg.properties.id
    start_date: MetaOapg.properties.start_date
    creator: 'Creator5'
    orderindex: MetaOapg.properties.orderindex
    custom_fields: MetaOapg.properties.custom_fields
    date_created: MetaOapg.properties.date_created
    custom_id: MetaOapg.properties.custom_id
    due_date: MetaOapg.properties.due_date
    priority: MetaOapg.properties.priority
    url: MetaOapg.properties.url
    dependencies: 'Task3Dependencies'
    tags: MetaOapg.properties.tags
    time_estimate: MetaOapg.properties.time_estimate
    permission_level: MetaOapg.properties.permission_level
    linked_tasks: 'Task3LinkedTasks'
    folder: 'Folder3'
    name: MetaOapg.properties.name
    status: 'Status'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_id"]) -> MetaOapg.properties.custom_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text_content"]) -> MetaOapg.properties.text_content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_updated"]) -> MetaOapg.properties.date_updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_closed"]) -> MetaOapg.properties.date_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_done"]) -> MetaOapg.properties.date_done: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'Creator5': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignees"]) -> MetaOapg.properties.assignees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchers"]) -> MetaOapg.properties.watchers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checklists"]) -> MetaOapg.properties.checklists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["points"]) -> MetaOapg.properties.points: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_estimate"]) -> MetaOapg.properties.time_estimate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependencies"]) -> 'Task3Dependencies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked_tasks"]) -> 'Task3LinkedTasks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["list"]) -> 'List2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'Project': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder"]) -> 'Folder3': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["space"]) -> 'Space': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markdown_description"]) -> MetaOapg.properties.markdown_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "description", "id", "custom_id", "name", "text_content", "status", "orderindex", "date_created", "date_updated", "date_closed", "date_done", "creator", "assignees", "watchers", "checklists", "parent", "priority", "due_date", "start_date", "points", "time_estimate", "custom_fields", "dependencies", "linked_tasks", "team_id", "url", "permission_level", "list", "project", "folder", "space", "markdown_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_id"]) -> MetaOapg.properties.custom_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text_content"]) -> MetaOapg.properties.text_content: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_updated"]) -> MetaOapg.properties.date_updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_closed"]) -> MetaOapg.properties.date_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_done"]) -> MetaOapg.properties.date_done: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'Creator5': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignees"]) -> MetaOapg.properties.assignees: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchers"]) -> MetaOapg.properties.watchers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checklists"]) -> MetaOapg.properties.checklists: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["points"]) -> MetaOapg.properties.points: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_estimate"]) -> MetaOapg.properties.time_estimate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependencies"]) -> 'Task3Dependencies': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked_tasks"]) -> 'Task3LinkedTasks': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["list"]) -> 'List2': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> 'Project': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> 'Folder3': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["space"]) -> 'Space': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markdown_description"]) -> typing.Union[MetaOapg.properties.markdown_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "description", "id", "custom_id", "name", "text_content", "status", "orderindex", "date_created", "date_updated", "date_closed", "date_done", "creator", "assignees", "watchers", "checklists", "parent", "priority", "due_date", "start_date", "points", "time_estimate", "custom_fields", "dependencies", "linked_tasks", "team_id", "url", "permission_level", "list", "project", "folder", "space", "markdown_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        checklists: typing.Union[MetaOapg.properties.checklists, list, tuple, ],
        parent: typing.Union[MetaOapg.properties.parent, str, ],
        date_updated: typing.Union[MetaOapg.properties.date_updated, str, ],
        text_content: typing.Union[MetaOapg.properties.text_content, str, ],
        assignees: typing.Union[MetaOapg.properties.assignees, list, tuple, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        project: 'Project',
        watchers: typing.Union[MetaOapg.properties.watchers, list, tuple, ],
        team_id: typing.Union[MetaOapg.properties.team_id, str, ],
        space: 'Space',
        points: typing.Union[MetaOapg.properties.points, decimal.Decimal, int, float, ],
        date_done: typing.Union[MetaOapg.properties.date_done, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        date_closed: typing.Union[MetaOapg.properties.date_closed, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, ],
        creator: 'Creator5',
        orderindex: typing.Union[MetaOapg.properties.orderindex, str, ],
        custom_fields: typing.Union[MetaOapg.properties.custom_fields, list, tuple, ],
        date_created: typing.Union[MetaOapg.properties.date_created, str, ],
        custom_id: typing.Union[MetaOapg.properties.custom_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        due_date: typing.Union[MetaOapg.properties.due_date, str, ],
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        dependencies: 'Task3Dependencies',
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        time_estimate: typing.Union[MetaOapg.properties.time_estimate, decimal.Decimal, int, float, ],
        permission_level: typing.Union[MetaOapg.properties.permission_level, str, ],
        linked_tasks: 'Task3LinkedTasks',
        folder: 'Folder3',
        name: typing.Union[MetaOapg.properties.name, str, ],
        status: 'Status',
        markdown_description: typing.Union[MetaOapg.properties.markdown_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Task3':
        return super().__new__(
            cls,
            *args,
            checklists=checklists,
            parent=parent,
            date_updated=date_updated,
            text_content=text_content,
            assignees=assignees,
            description=description,
            project=project,
            watchers=watchers,
            team_id=team_id,
            space=space,
            points=points,
            date_done=date_done,
            date_closed=date_closed,
            id=id,
            start_date=start_date,
            creator=creator,
            orderindex=orderindex,
            custom_fields=custom_fields,
            date_created=date_created,
            custom_id=custom_id,
            due_date=due_date,
            priority=priority,
            url=url,
            dependencies=dependencies,
            tags=tags,
            time_estimate=time_estimate,
            permission_level=permission_level,
            linked_tasks=linked_tasks,
            folder=folder,
            name=name,
            status=status,
            markdown_description=markdown_description,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.assignees1 import Assignees1
from click_up_python_sdk.model.checklists6 import Checklists6
from click_up_python_sdk.model.creator5 import Creator5
from click_up_python_sdk.model.custom_fields9 import CustomFields9
from click_up_python_sdk.model.folder3 import Folder3
from click_up_python_sdk.model.list2 import List2
from click_up_python_sdk.model.project import Project
from click_up_python_sdk.model.space import Space
from click_up_python_sdk.model.status import Status
from click_up_python_sdk.model.tags6 import Tags6
from click_up_python_sdk.model.task3_dependencies import Task3Dependencies
from click_up_python_sdk.model.task3_linked_tasks import Task3LinkedTasks
from click_up_python_sdk.model.watchers1 import Watchers1
