# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Task9(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "checklists",
            "parent",
            "creator",
            "date_updated",
            "orderindex",
            "date_created",
            "due_date",
            "assignees",
            "list",
            "priority",
            "space",
            "url",
            "tags",
            "time_spent",
            "date_done",
            "time_estimate",
            "folder",
            "date_closed",
            "name",
            "custom_item_id",
            "id",
            "start_date",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['Task9Tags']:
                return Task9Tags
            id = schemas.StrSchema
            custom_item_id = schemas.AnyTypeSchema
            name = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['Status']:
                return Status
            orderindex = schemas.StrSchema
            date_created = schemas.StrSchema
            date_updated = schemas.StrSchema
            date_closed = schemas.AnyTypeSchema
            date_done = schemas.AnyTypeSchema
        
            @staticmethod
            def creator() -> typing.Type['Creator']:
                return Creator
        
            @staticmethod
            def assignees() -> typing.Type['Task9Assignees']:
                return Task9Assignees
        
            @staticmethod
            def checklists() -> typing.Type['Task9Checklists']:
                return Task9Checklists
            parent = schemas.AnyTypeSchema
            priority = schemas.AnyTypeSchema
            due_date = schemas.AnyTypeSchema
            start_date = schemas.AnyTypeSchema
            time_estimate = schemas.AnyTypeSchema
            time_spent = schemas.AnyTypeSchema
        
            @staticmethod
            def _list() -> typing.Type['ModelList']:
                return ModelList
        
            @staticmethod
            def folder() -> typing.Type['Folder']:
                return Folder
        
            @staticmethod
            def space() -> typing.Type['Space']:
                return Space
            url = schemas.StrSchema
            markdown_description = schemas.StrSchema
            __annotations__ = {
                "tags": tags,
                "id": id,
                "custom_item_id": custom_item_id,
                "name": name,
                "status": status,
                "orderindex": orderindex,
                "date_created": date_created,
                "date_updated": date_updated,
                "date_closed": date_closed,
                "date_done": date_done,
                "creator": creator,
                "assignees": assignees,
                "checklists": checklists,
                "parent": parent,
                "priority": priority,
                "due_date": due_date,
                "start_date": start_date,
                "time_estimate": time_estimate,
                "time_spent": time_spent,
                "list": _list,
                "folder": folder,
                "space": space,
                "url": url,
                "markdown_description": markdown_description,
            }
    
    checklists: 'Task9Checklists'
    parent: MetaOapg.properties.parent
    creator: 'Creator'
    date_updated: MetaOapg.properties.date_updated
    orderindex: MetaOapg.properties.orderindex
    date_created: MetaOapg.properties.date_created
    due_date: MetaOapg.properties.due_date
    assignees: 'Task9Assignees'
    priority: MetaOapg.properties.priority
    space: 'Space'
    url: MetaOapg.properties.url
    tags: 'Task9Tags'
    time_spent: MetaOapg.properties.time_spent
    date_done: MetaOapg.properties.date_done
    time_estimate: MetaOapg.properties.time_estimate
    folder: 'Folder'
    date_closed: MetaOapg.properties.date_closed
    name: MetaOapg.properties.name
    custom_item_id: MetaOapg.properties.custom_item_id
    id: MetaOapg.properties.id
    start_date: MetaOapg.properties.start_date
    status: 'Status'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'Task9Tags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_item_id"]) -> MetaOapg.properties.custom_item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_updated"]) -> MetaOapg.properties.date_updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_closed"]) -> MetaOapg.properties.date_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_done"]) -> MetaOapg.properties.date_done: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'Creator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignees"]) -> 'Task9Assignees': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checklists"]) -> 'Task9Checklists': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_estimate"]) -> MetaOapg.properties.time_estimate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_spent"]) -> MetaOapg.properties.time_spent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["list"]) -> 'ModelList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder"]) -> 'Folder': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["space"]) -> 'Space': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markdown_description"]) -> MetaOapg.properties.markdown_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "id", "custom_item_id", "name", "status", "orderindex", "date_created", "date_updated", "date_closed", "date_done", "creator", "assignees", "checklists", "parent", "priority", "due_date", "start_date", "time_estimate", "time_spent", "list", "folder", "space", "url", "markdown_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> 'Task9Tags': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_item_id"]) -> MetaOapg.properties.custom_item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_updated"]) -> MetaOapg.properties.date_updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_closed"]) -> MetaOapg.properties.date_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_done"]) -> MetaOapg.properties.date_done: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'Creator': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignees"]) -> 'Task9Assignees': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checklists"]) -> 'Task9Checklists': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_estimate"]) -> MetaOapg.properties.time_estimate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_spent"]) -> MetaOapg.properties.time_spent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["list"]) -> 'ModelList': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> 'Folder': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["space"]) -> 'Space': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markdown_description"]) -> typing.Union[MetaOapg.properties.markdown_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "id", "custom_item_id", "name", "status", "orderindex", "date_created", "date_updated", "date_closed", "date_done", "creator", "assignees", "checklists", "parent", "priority", "due_date", "start_date", "time_estimate", "time_spent", "list", "folder", "space", "url", "markdown_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        checklists: 'Task9Checklists',
        parent: typing.Union[MetaOapg.properties.parent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        creator: 'Creator',
        date_updated: typing.Union[MetaOapg.properties.date_updated, str, ],
        orderindex: typing.Union[MetaOapg.properties.orderindex, str, ],
        date_created: typing.Union[MetaOapg.properties.date_created, str, ],
        due_date: typing.Union[MetaOapg.properties.due_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        assignees: 'Task9Assignees',
        priority: typing.Union[MetaOapg.properties.priority, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        space: 'Space',
        url: typing.Union[MetaOapg.properties.url, str, ],
        tags: 'Task9Tags',
        time_spent: typing.Union[MetaOapg.properties.time_spent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        date_done: typing.Union[MetaOapg.properties.date_done, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        time_estimate: typing.Union[MetaOapg.properties.time_estimate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        folder: 'Folder',
        date_closed: typing.Union[MetaOapg.properties.date_closed, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        custom_item_id: typing.Union[MetaOapg.properties.custom_item_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        status: 'Status',
        markdown_description: typing.Union[MetaOapg.properties.markdown_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Task9':
        return super().__new__(
            cls,
            *args,
            checklists=checklists,
            parent=parent,
            creator=creator,
            date_updated=date_updated,
            orderindex=orderindex,
            date_created=date_created,
            due_date=due_date,
            assignees=assignees,
            priority=priority,
            space=space,
            url=url,
            tags=tags,
            time_spent=time_spent,
            date_done=date_done,
            time_estimate=time_estimate,
            folder=folder,
            date_closed=date_closed,
            name=name,
            custom_item_id=custom_item_id,
            id=id,
            start_date=start_date,
            status=status,
            markdown_description=markdown_description,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.creator import Creator
from click_up_python_sdk.model.folder import Folder
from click_up_python_sdk.model.model_list import ModelList
from click_up_python_sdk.model.space import Space
from click_up_python_sdk.model.status import Status
from click_up_python_sdk.model.task9_assignees import Task9Assignees
from click_up_python_sdk.model.task9_checklists import Task9Checklists
from click_up_python_sdk.model.task9_tags import Task9Tags
