# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Settings(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "show_subtask_parent_names",
            "show_assignees",
            "collapse_empty_columns",
            "show_subtasks",
            "show_closed_subtasks",
            "show_task_locations",
            "me_comments",
            "show_images",
            "me_checklists",
            "me_subtasks",
        }
        
        class properties:
            show_task_locations = schemas.BoolSchema
            show_subtasks = schemas.IntSchema
            show_subtask_parent_names = schemas.BoolSchema
            show_closed_subtasks = schemas.BoolSchema
            show_assignees = schemas.BoolSchema
            show_images = schemas.BoolSchema
            collapse_empty_columns = schemas.AnyTypeSchema
            me_comments = schemas.BoolSchema
            me_subtasks = schemas.BoolSchema
            me_checklists = schemas.BoolSchema
            __annotations__ = {
                "show_task_locations": show_task_locations,
                "show_subtasks": show_subtasks,
                "show_subtask_parent_names": show_subtask_parent_names,
                "show_closed_subtasks": show_closed_subtasks,
                "show_assignees": show_assignees,
                "show_images": show_images,
                "collapse_empty_columns": collapse_empty_columns,
                "me_comments": me_comments,
                "me_subtasks": me_subtasks,
                "me_checklists": me_checklists,
            }
    
    show_subtask_parent_names: MetaOapg.properties.show_subtask_parent_names
    show_assignees: MetaOapg.properties.show_assignees
    collapse_empty_columns: MetaOapg.properties.collapse_empty_columns
    show_subtasks: MetaOapg.properties.show_subtasks
    show_closed_subtasks: MetaOapg.properties.show_closed_subtasks
    show_task_locations: MetaOapg.properties.show_task_locations
    me_comments: MetaOapg.properties.me_comments
    show_images: MetaOapg.properties.show_images
    me_checklists: MetaOapg.properties.me_checklists
    me_subtasks: MetaOapg.properties.me_subtasks
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_task_locations"]) -> MetaOapg.properties.show_task_locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_subtasks"]) -> MetaOapg.properties.show_subtasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_subtask_parent_names"]) -> MetaOapg.properties.show_subtask_parent_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_closed_subtasks"]) -> MetaOapg.properties.show_closed_subtasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_assignees"]) -> MetaOapg.properties.show_assignees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_images"]) -> MetaOapg.properties.show_images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collapse_empty_columns"]) -> MetaOapg.properties.collapse_empty_columns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["me_comments"]) -> MetaOapg.properties.me_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["me_subtasks"]) -> MetaOapg.properties.me_subtasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["me_checklists"]) -> MetaOapg.properties.me_checklists: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_task_locations"]) -> MetaOapg.properties.show_task_locations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_subtasks"]) -> MetaOapg.properties.show_subtasks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_subtask_parent_names"]) -> MetaOapg.properties.show_subtask_parent_names: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_closed_subtasks"]) -> MetaOapg.properties.show_closed_subtasks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_assignees"]) -> MetaOapg.properties.show_assignees: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_images"]) -> MetaOapg.properties.show_images: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collapse_empty_columns"]) -> MetaOapg.properties.collapse_empty_columns: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["me_comments"]) -> MetaOapg.properties.me_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["me_subtasks"]) -> MetaOapg.properties.me_subtasks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["me_checklists"]) -> MetaOapg.properties.me_checklists: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        show_subtask_parent_names: typing.Union[MetaOapg.properties.show_subtask_parent_names, bool, ],
        show_assignees: typing.Union[MetaOapg.properties.show_assignees, bool, ],
        collapse_empty_columns: typing.Union[MetaOapg.properties.collapse_empty_columns, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        show_subtasks: typing.Union[MetaOapg.properties.show_subtasks, decimal.Decimal, int, ],
        show_closed_subtasks: typing.Union[MetaOapg.properties.show_closed_subtasks, bool, ],
        show_task_locations: typing.Union[MetaOapg.properties.show_task_locations, bool, ],
        me_comments: typing.Union[MetaOapg.properties.me_comments, bool, ],
        show_images: typing.Union[MetaOapg.properties.show_images, bool, ],
        me_checklists: typing.Union[MetaOapg.properties.me_checklists, bool, ],
        me_subtasks: typing.Union[MetaOapg.properties.me_subtasks, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Settings':
        return super().__new__(
            cls,
            *args,
            show_subtask_parent_names=show_subtask_parent_names,
            show_assignees=show_assignees,
            collapse_empty_columns=collapse_empty_columns,
            show_subtasks=show_subtasks,
            show_closed_subtasks=show_closed_subtasks,
            show_task_locations=show_task_locations,
            me_comments=me_comments,
            show_images=show_images,
            me_checklists=me_checklists,
            me_subtasks=me_subtasks,
            _configuration=_configuration,
            **kwargs,
        )
