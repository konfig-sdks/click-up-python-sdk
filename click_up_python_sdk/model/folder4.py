# coding: utf-8

"""
    ClickUp API Reference

    This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from click_up_python_sdk import schemas  # noqa: F401


class Folder4(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "archived",
            "permission_level",
            "hidden",
            "orderindex",
            "lists",
            "name",
            "statuses",
            "id",
            "override_statuses",
            "task_count",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            orderindex = schemas.IntSchema
            override_statuses = schemas.BoolSchema
            hidden = schemas.BoolSchema
            task_count = schemas.StrSchema
            archived = schemas.BoolSchema
            
            
            class statuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Status']:
                        return Status
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Status'], typing.List['Status']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statuses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Status':
                    return super().__getitem__(i)
        
            @staticmethod
            def lists() -> typing.Type['Folder4Lists']:
                return Folder4Lists
            permission_level = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "orderindex": orderindex,
                "override_statuses": override_statuses,
                "hidden": hidden,
                "task_count": task_count,
                "archived": archived,
                "statuses": statuses,
                "lists": lists,
                "permission_level": permission_level,
            }
    
    archived: MetaOapg.properties.archived
    permission_level: MetaOapg.properties.permission_level
    hidden: MetaOapg.properties.hidden
    orderindex: MetaOapg.properties.orderindex
    lists: 'Folder4Lists'
    name: MetaOapg.properties.name
    statuses: MetaOapg.properties.statuses
    id: MetaOapg.properties.id
    override_statuses: MetaOapg.properties.override_statuses
    task_count: MetaOapg.properties.task_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["override_statuses"]) -> MetaOapg.properties.override_statuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task_count"]) -> MetaOapg.properties.task_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statuses"]) -> MetaOapg.properties.statuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lists"]) -> 'Folder4Lists': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "orderindex", "override_statuses", "hidden", "task_count", "archived", "statuses", "lists", "permission_level", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderindex"]) -> MetaOapg.properties.orderindex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["override_statuses"]) -> MetaOapg.properties.override_statuses: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task_count"]) -> MetaOapg.properties.task_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statuses"]) -> MetaOapg.properties.statuses: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lists"]) -> 'Folder4Lists': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "orderindex", "override_statuses", "hidden", "task_count", "archived", "statuses", "lists", "permission_level", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        archived: typing.Union[MetaOapg.properties.archived, bool, ],
        permission_level: typing.Union[MetaOapg.properties.permission_level, str, ],
        hidden: typing.Union[MetaOapg.properties.hidden, bool, ],
        orderindex: typing.Union[MetaOapg.properties.orderindex, decimal.Decimal, int, ],
        lists: 'Folder4Lists',
        name: typing.Union[MetaOapg.properties.name, str, ],
        statuses: typing.Union[MetaOapg.properties.statuses, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        override_statuses: typing.Union[MetaOapg.properties.override_statuses, bool, ],
        task_count: typing.Union[MetaOapg.properties.task_count, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Folder4':
        return super().__new__(
            cls,
            *args,
            archived=archived,
            permission_level=permission_level,
            hidden=hidden,
            orderindex=orderindex,
            lists=lists,
            name=name,
            statuses=statuses,
            id=id,
            override_statuses=override_statuses,
            task_count=task_count,
            _configuration=_configuration,
            **kwargs,
        )

from click_up_python_sdk.model.folder4_lists import Folder4Lists
from click_up_python_sdk.model.status import Status
